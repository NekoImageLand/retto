name: Check and Build retto

on:
  push:
    branches:
      - master
    tags:
      - '*'
    paths:
      - "retto-cli/**"
      - "retto-core/**"
      - "retto-wasm/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - "justfile"
  pull_request:
    branches:
      - master
    paths:
      - "retto-cli/**"
      - "retto-core/**"
      - "retto-wasm/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - "justfile"
  workflow_dispatch:

permissions: write-all

env:
  CARGO_TERM_COLOR: always

jobs:
  fmt-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: extractions/setup-just@v3
      - name: Setup emsdk
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: 4.0.4
      - name: Setup Rust toolchain
        run: just setup
      - name: Format Check
        run: just fmt-check

  clippy-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: extractions/setup-just@v3
      - name: Setup emsdk
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: 4.0.4
      - name: Setup Rust toolchain
        run: just setup
      - name: Clippy Check
        run: just clippy-check

  build-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: extractions/setup-just@v3
      - name: Setup emsdk
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: 4.0.4
      - name: Setup Rust toolchain
        run: just setup
      - name: Build Check
        run: just build-check

  build-cli:
    name: Build retto-cli
    runs-on: ${{ matrix.host }}
    needs: ["fmt-check", "clippy-check", "build-check"]
    strategy:
      matrix:
        host: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: extractions/setup-just@v3
      - name: Setup emsdk
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: 4.0.4
      - name: Setup Rust toolchain
        run: just setup
      - name: Build retto-cli
        run: just build-cli
      - name: Package binaries
        run: |
          mkdir -p artifacts
          cp target/release/retto-cli* artifacts/
          rm artifacts/*.d
          tar -czf retto-cli-${{ matrix.host }}.tar.gz -C artifacts .
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: retto-cli-${{ matrix.host }}
          path: retto-cli-${{ matrix.host }}.tar.gz

  build-wasm:
    name: Build retto-wasm
    runs-on: ubuntu-latest
    needs: ["fmt-check", "clippy-check", "build-check"]
    steps:
      - uses: actions/checkout@v4
      - uses: extractions/setup-just@v3
      - name: Setup emsdk
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: 4.0.4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          package_json_file: "retto-wasm/fe/package.json"
      - name: Setup Rust toolchain
        run: just setup
      - name: Build retto-wasm
        run: just build-wasm
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: retto-wasm
          path: retto-wasm/fe/*.tgz

  relase:
    name: Release retto
    runs-on: ubuntu-latest
    needs: ["build-cli", "build-wasm"]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: retto-artifacts
          merge-multiple: true
      - name: Display structure of downloaded files
        run: ls -R retto-artifacts
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          '${{ github.ref_name }}'
          --repo '${{ github.repository }}'
          --notes ""
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release upload '${{ github.ref_name }}' retto-artifacts/* --repo '${{ github.repository }}'

  publish-wasm-npm:
    name: Publish retto-wasm on npm
    runs-on: ubuntu-latest
    needs: ["build-wasm"]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - uses: extractions/setup-just@v3
      - name: Setup pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          package_json_file: "retto-wasm/fe/package.json"
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: retto-artifacts
          pattern: "retto-wasm"
          merge-multiple: true
      - name: Set publishing config
        run: pnpm config set '//registry.npmjs.org/:_authToken' "${NODE_AUTH_TOKEN}"
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      - name: Publish retto-wasm on npm
        run: |
          TGZ_FILE=$(find retto-artifacts -name '*.tgz' | head -n 1)
          echo "ðŸ“¦ Found package: $TGZ_FILE"
          pnpm publish ./"$TGZ_FILE" --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ github.token }}
